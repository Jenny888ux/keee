{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module Main where

import           Control.DeepSeq(NFData)
import           Data.Proxy(Proxy(..))
import           Data.Binary(Binary(..))
import           GHC.Generics(Generic)

import           Imj.Categorized
import           Imj.Game.App(runGame)
import           Imj.Game.Class
import           Imj.Game.Status
import           Imj.Geo.Discrete.Types
import           Imj.Graphics.Screen
import           Imj.Graphics.UI.RectContainer
import           Imj.Input.Types
import           Imj.Music
import           Imj.Server.Class
import           Imj.Server.Connection
import           Imj.Server.Types

-- 'Proxy' is used to "tell" the type system what is the type of game:

main :: IO ()
main = runGame (Proxy :: Proxy SynthsGame)

-- | This implements the client-side logic of the game
newtype SynthsGame = SynthsGame ()

-- | 'IncServer' is the game-specific state of the server. It holds nothing in our case,
-- because the server just broadcasts player events:
newtype SynthsServer = SynthsServer ()
  deriving(Generic)
instance NFData SynthsServer

-- | This represents events generated by the server, sent to the clients.
-- the server will send music events, which are generic events so we don'T need any specific
-- event here.
type SynthsServerEvent = ()

-- | This represents events generated by the client and sent to the server.
data SynthClientEvent =
    PlayNote {-# UNPACK #-} !Music !Instrument
  deriving(Show,Generic)
instance Binary SynthClientEvent
instance Categorized SynthClientEvent

instance GameExternalUI SynthsGame where

  gameWindowTitle = const "Play some music!"

  -- This defines the size of the outer frame you see when running the game.
  -- Note that the size depends on the counter value:
  getViewport _ (Screen _ center) (SynthsGame _) =
    mkCenteredRectContainer center $ Size 10 10

instance GameLogic SynthsGame where

  -- A 'GameLogic' instance is tied to a 'Server' instance via the associated type 'ServerT'
  type ServerT SynthsGame = SynthsServer

  -- TODO we need to detect key pressed / key released events.
  -- I guess it's not possible through the terminal, so we should force using the
  -- glfw window.
  keyMaps key _ = return $ case key of
    AlphaNum ' ' -> Just $ CliEvt $ ClientAppEvt $ PlayNote (StartNote (NoteSpec Mi noOctave) 1) SineSynth
    _ -> Nothing

  onClientOnlyEvent = \case
    () -> return ()
  -- TODO add particle systems on each note (we'll need to send a specific server event)
  onServerEvent  = \case
    () -> return ()

instance GameDraw SynthsGame

instance ServerInit SynthsServer where

  type ClientViewT SynthsServer = ()

  mkInitialState = return ((), SynthsServer ())

  mkInitialClient = ()

instance ServerInParallel SynthsServer

instance ServerClientLifecycle SynthsServer where

  clientCanJoin _ = do
    -- A client has just connected, we make it be part of the current game:
    notifyClient' $ EnterState $ Included $ PlayLevel Running
    return True

instance ServerClientHandler SynthsServer where

  type StateValueT  SynthsServer = GameStateValue -- This is required

  type ClientEventT SynthsServer = SynthClientEvent

  handleClientEvent (PlayNote n i) =
    notifyEveryone' $ PlayMusic n i

instance Server SynthsServer where

  type ServerEventT SynthsServer = SynthsServerEvent

instance ServerCmdParser SynthsServer where
