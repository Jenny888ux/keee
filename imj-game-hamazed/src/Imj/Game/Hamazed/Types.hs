{-# OPTIONS_HADDOCK hide #-}

{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module Imj.Game.Hamazed.Types
    ( ProgramEnd(..)
    , Game(..)
    , GameTime
    , GameState(..)
    , UpdateEvent
    , EventGroup(..)
    , GenEvent(..)
    , initialParameters
    , initialViewMode
    , minRandomBlockSize
    -- * Reexports
    , module Imj.Game.Hamazed.Level.Types
    , module Imj.Game.Hamazed.World.Types
    , UIAnimation
    ) where

import           Imj.Prelude
import           Control.Exception.Base(Exception(..))

import           Imj.Game.Hamazed.Chat
import           Imj.Game.Hamazed.Level.Types
import           Imj.Game.Hamazed.Loop.Event.Types
import           Imj.Game.Hamazed.Loop.Timing
import           Imj.Game.Hamazed.Network.Types
import           Imj.Game.Hamazed.World.Types
import           Imj.Game.Hamazed.World.Space.Types
import           Imj.Graphics.UI.Animation
import           Imj.Util


data ProgramEnd =
    GracefulProgramEnd
  | UnexpectedProgramEnd !String
  |Â ErrorFromServer !String
instance Exception ProgramEnd
instance Show ProgramEnd where
  show GracefulProgramEnd = "Thanks for playing!"
  show (UnexpectedProgramEnd s) = "Program ended: " ++ s
  show (ErrorFromServer s) = "An error occured in the Server: " ++ s


data EventGroup = EventGroup {
    events :: ![UpdateEvent]
  , _eventGroupHasPrincipal :: !Bool
  , _eventGroupUpdateDuration :: !(Time Duration System)
  , _eventGroupVisibleTimeRange :: !(Maybe (Range (Time Point System)))
  -- ^ Range of /visible/ events deadlines
}

-- | Regroups events that can be handled immediately by the client.
type UpdateEvent = Either ServerEvent Event

{- Regroups all kinds of events. -}
data GenEvent =
    Evt {-# UNPACK #-} !Event
    -- ^ Are generated by the client and can be handled by the client immediately.
  | CliEvt {-# UNPACK #-} !ClientEvent
    -- ^ Are generated by the client but can't be handled by the client, and are sent to the game server.
  | SrvEvt {-# UNPACK #-} !ServerEvent
    -- ^ Are generated by the game server, and can be handled by the client immediately once received.
    deriving(Generic, Show)

data Game = Game {
    getClientState' :: {-# UNPACK #-} !ClientState
  , getViewMode' :: {-# UNPACK #-} !ViewMode
  , getGameState' :: !GameState
  , _gameSuggestedPlayerName :: {-# UNPACK #-} !SuggestedPlayerName
  , getServer :: {-# UNPACK #-} !Server
  -- ^ The server that runs the game
  , connection :: {-# UNPACK #-} !ConnectionStatus
  , chat :: !Chat
}


{-| 'GameState' has two fields of type 'World' : during 'Level' transitions,
we draw the /old/ 'World' while using the /new/ 'World' 's
dimensions to animate the UI accordingly. -}
data GameState = GameState {
    getPreviousWorld :: !World
    -- ^ The previous 'World'
  , gameStateCurrentWorld :: !World
    -- ^ The current 'World'
  , _gameStateShotNumbers :: ![Int]
    -- ^ Which 'Number's were shot
  , _gameStateLevel :: !Level
    -- ^ The current 'Level'
  , getUIAnimation :: !UIAnimation
    -- ^ Inter-level animation.
  , getScreen :: {-# UNPACK #-} !Screen
}


minRandomBlockSize :: Int
minRandomBlockSize = 6 -- using 4 it once took a very long time (one minute, then I killed the process)
                       -- 6 has always been ok

initialParameters :: WorldParameters
initialParameters = WorldParameters Rectangle2x1 (Random defaultRandom)

initialViewMode :: ViewMode
initialViewMode = CenterSpace

defaultRandom :: RandomParameters
defaultRandom = RandomParameters minRandomBlockSize StrictlyOneComponent
